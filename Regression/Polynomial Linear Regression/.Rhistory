install.packages("ggplot2")
ggplot2()
q()
dir
plot(1, 5)
plot(20:30)
pwd
data = read.csv("data.csv")
plot(data)
plot(data)
x = data$x
print(x)
print(x)
pwd
hist(x)
hist(x)
hist(data$y)
print(net2)
jpeg("main_network.jpeg")
############# GRAPH
?igraph
dataFrame = read.csv("main_network.csv")
net<-igraph::graph.data.frame(dataFrame, directed = F)
print(net)
net2 <- igraph::simplify(net)
print(net2)
jpeg("main_network.jpeg")
plot(net2)
dev.off()
############# GRAPH
?igraph
dataFrame = read.csv("main_network.csv")
net<-igraph::graph.data.frame(dataFrame, directed = F)
print(net)
net2 <- igraph::simplify(net)
print(net2)
jpeg("main_network.jpeg")
plot(net2)
dev.off()
igraph::V(net2)
# Predicting on the test results
y_predicted <- predict(
regression_linear_model,
as.data.frame(testing_data$YearsExperience)
)
# Printing results.
print(y_predicted)
install.packages('ggplot2')
ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x = training_set$YearsExperience, y=training_set$Salary), color="red")
y_predicted = lm(linear_regression_model, newdata = testing_data)
# 2. Training linear regression model.
# Fitting multi linear regression model.
linear_regression_model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_data
)
summary(linear_regression_model)
y_predicted = lm(linear_regression_model, newdata = testing_data)
dataset <- read.csv("50_Startups.csv")
library(caTools)
# 1. Preprocessing
# 1.1 Encoding categorical data.
dataset$State <- factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# 1.2 Splitting data set into training and testing.
split_format <- caTools::sample.split(dataset$State, SplitRatio = 0.8)
dataset <- read.csv("50_Startups.csv")
setwd("~/SocialNets/R-ML/Regression/Polynomial Linear Regression")
data_set <- read.csv("Position_Salaries.csv")
print(data_set)
library(caTools)
# Preprocessing data.
data_set <- data_set[2:3]
# Importing libraries.
library(caTools)
# Loading data.
data_set <- read.csv("Position_Salaries.csv")
print(data_set)
# Preprocessing data.
data_set <- data_set[2:3]
print(data_set)
summary(data_set)
library(ggplot2)
# Importing libraries.
library(caTools)
library(ggplot2)
# Loading data.
data_set <- read.csv("Position_Salaries.csv")
print(data_set)
# Preprocessing data.
data_set <- data_set[2:3]
print(data_set)
summary(data_set)
ggplot()
ggplot() + geom_point(data_set$Level, data_set$Salary)
ggplot() + geom_point(aes(data_set$Level, data_set$Salary)
ggplot() + geom_point(aes(data_set$Level, data_set$Salary))
ggplot() + geom_point(aes(data_set$Level, data_set$Salary), color="red")
# Importing libraries.
library(caTools)
library(ggplot2)
# Loading data.
dataset <- read.csv("Position_Salaries.csv")
print(dataset)
# Preprocessing data.
dataset <- data_set[2:3]
print(dataset)
# Creating simple linear regression model.
linear_regression_model <- lm()
# Creating simple linear regression model.
linear_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
# Creating simple linear regression model.
linear_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
predict(linear_regression_model, dataset)
# Importing libraries.
library(caTools)
library(ggplot2)
# Loading data.
dataset <- read.csv("Position_Salaries.csv")
print(dataset)
# Preprocessing data.
dataset <- data_set[2:3]
print(dataset)
# Creating simple linear regression model.
linear_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
print(level)
print(Level)
Level <- dataset$Level
print(Level)
Level <- cbind(dataset$Level)
print(Level)
Level <- c(dataset$Level)
Level <- c(dataset$Level)
print(Level)
Level <- as.data.frame(c(dataset$Level))
print(Level)
Level <- as.data.frame(
Level<-c(dataset$Level)
)
print(Level)
Level <- as.data.frame(
Level=c(dataset$Level)
)
Level <- as.data.frame(
Level=c(dataset$Level)
)
data <- as.data.frame(
Level=c(dataset$Level)
)
data <- as.data.frame(
Level=c(dataset$Level)
)
data <- dataset$Level
print(data)
data <- as.data.frame(dataset$Level)
print(data)
data <- as.data.frame(Level=dataset$Level)
data <- as.data.frame(Level<-dataset$Level)
print(data)
data <- as.data.frame(cbind(dataset$Level))
data <- as.data.frame(cbind(dataset$Level))
print(data)
data <- as.data.frame(cbind(d<-dataset$Level))
print(data)
data <- as.data.frame(cbind(d=dataset$Level))
print(data)
data <- as.data.frame(cbind(Level=dataset$Level))
print(data)
predict(linear_regression_model, data)
data <- as.data.frame(cbind(Level=dataset$Level))
print(data)
predict(linear_regression_model, data)
predict(linear_regression_model, dataset)
predict(linear_regression_model, test_data)
test_data <- as.data.frame(cbind(Level=dataset$Level))
predict(linear_regression_model, dataset)
predict(linear_regression_model, test_data)
summary(linear_regression_model)
# Creating/ fitting polynomial linear regression model to the data set.
polynomial_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
# Importing libraries.
library(caTools)
library(ggplot2)
# Loading data.
dataset <- read.csv("Position_Salaries.csv")
print(dataset)
# Preprocessing data.
dataset <- data_set[2:3]
print(dataset)
# Creating/ fitting simple linear regression model to the data set.
linear_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
summary(linear_regression_model)
test_data <- as.data.frame(cbind(Level=dataset$Level))
predict(linear_regression_model, dataset)
predict(linear_regression_model, test_data)
# Creating/ fitting polynomial linear regression model to the data set.
polynomial_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
# Creating/ fitting polynomial linear regression model to the data set.
dataset$Level2 = dataset$Level^2
print(dataset)
polynomial_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
# Creating/ fitting polynomial linear regression model to the data set.
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
print(dataset)
# Creating/ fitting polynomial linear regression model to the data set.
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
print(dataset)
polynomial_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
summary(polynomial_regression_model)
# Importing libraries.
library(caTools)
library(ggplot2)
# Loading data.
dataset <- read.csv("Position_Salaries.csv")
print(dataset)
# Preprocessing data.
dataset <- data_set[2:3]
print(dataset)
# Creating/ fitting simple linear regression model to the data set.
linear_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
summary(linear_regression_model)
test_data <- as.data.frame(cbind(Level=dataset$Level))
predict(linear_regression_model, dataset)
predict(linear_regression_model, test_data)
# Creating/ fitting polynomial linear regression model to the data set.
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
print(dataset)
polynomial_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
summary(polynomial_regression_model)
# Visualizing the simple linear regression model results.
ggplot()+
# Visualizing the simple linear regression model results.
ggplot()
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary))
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, as.data.frame(cbind(Level=dataset$Level))))
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")+
ggtitle("Salary(level) - Simple linear regression and polynomial linear regression")
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")+
ggtitle("Salary(level) - Simple linear regression and polynomial linear regression") +
xlab("Level") + ylab("Salary [$]")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, dataset)), color="green")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, newdata=dataset)), color="green")
polynomial_regression_model <- lm(
formula = Salary ~ .,
data = dataset
)
summary(polynomial_regression_model)
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")+
ggtitle("Salary(level) - Simple linear regression and polynomial linear regression") +
xlab("Level") + ylab("Salary [$]")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, newdata=dataset)), color="green")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, newdata=dataset)), color="purple")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, newdata=dataset)), color="purple")+
ggtitle("Salary(level) - Polynomial linear regression") +
xlab("Level") + ylab("Salary [$]")
# Creating/ fitting polynomial linear regression model to the data set.
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
# Creating/ fitting polynomial linear regression model to the data set.
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
print(dataset)
polynomial_regression_model <- lm(
formula = Salary ~ .,
data = dataset
)
summary(polynomial_regression_model)
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")+
ggtitle("Salary(level) - Simple linear regression regression") +
xlab("Level [-]") + ylab("Salary [$]")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, newdata=dataset)), color="purple")+
ggtitle("Salary(level) - Polynomial linear regression") +
xlab("Level [-]") + ylab("Salary [$]")
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")+
ggtitle("Salary(level) - Simple linear regression regression") +
xlab("Level [-]") + ylab("Salary [$]")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, newdata=dataset)), color="purple")+
ggtitle("Salary(level) - Polynomial linear regression") +
xlab("Level [-]") + ylab("Salary [$]") + ggsave("Salary(Level)-Polynomial-Linear-Regression.jpg")
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")+
ggtitle("Salary(level) - Simple linear regression regression") +
xlab("Level [-]") + ylab("Salary [$]") + ggsave("Salary(Level)-Simple-Linear-Regression.jpg")
# Creating/ fitting polynomial linear regression model to the data set.
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
print(dataset)
polynomial_regression_model <- lm(
formula = Salary ~ .,
data = dataset
)
summary(polynomial_regression_model)
# Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")+
ggtitle("Salary(level) - Simple linear regression regression") +
xlab("Level [-]") + ylab("Salary [$]") #+ ggsave("Salary(Level)-Simple-Linear-Regression.jpg")
# Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, newdata=dataset)), color="purple")+
ggtitle("Salary(level) - Polynomial linear regression") +
xlab("Level [-]") + ylab("Salary [$]") #+ ggsave("Salary(Level)-Polynomial-Linear-Regression.jpg")
# Predicting new result with Simple Linear Regression model.
y_predicted <- predict(linear_regression_model,
as.data.frame(cbind(Level=(1))))
print(y_predicted)
# Predicting new result with Simple Linear Regression model.
y_predicted <- predict(linear_regression_model,
as.data.frame(cbind(Level=(5.0))))
print(y_predicted)
# 7. Predicting new result with Simple Linear Regression model.
y_predicted <- predict(linear_regression_model,
as.data.frame(cbind(Level=(6.5))))
print(y_predicted)
print(y_predicted)
print(y_predicted)
# 8. Predicting new result by using Polynomial regression model.
y_predicted <- predict(polynomial_regression_model, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4
))
print(y_predicted)
# 8. Predicting new result by using Polynomial regression model.
y_predictedd <- predict(polynomial_regression_model, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4
))
print(y_predictedd)
# 8. Predicting new result by using Polynomial regression model.
y_predictedd <- predict(polynomial_regression_model, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4
))
# 8. Predicting new result by using Polynomial regression model.
y_predicted <- predict(polynomial_regression_model, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4
))
print(y_predicted)
# 8. Predicting new result by using Polynomial regression model.
res <- print(data.frame(Level=6.5))
# 8. Predicting new result by using Polynomial regression model.
res <- print(data.frame(Level=6.5, Level2=6.5^2))
# 8. Predicting new result by using Polynomial regression model.
res <- print(data.frame(Level=6.5, Level2=6.5^2, Level3 = 6.5^3))
# 8. Predicting new result by using Polynomial regression model.
res <- print(data.frame(Level=6.5, Level2=6.5^2, Level3 = 6.5^3, Level4 = 6.5^4))
print(dataset)
print(dataset)
print(dataset)
# 2. Preprocessing data.
dataset <- data_set[2:3]
# 0. Importing libraries.
library(caTools)
library(ggplot2)
# 1. Loading data.
dataset <- read.csv("Position_Salaries.csv")
print(dataset)
# 2. Preprocessing data.
dataset <- dataset[2:3]
print(dataset)
# 3. Creating/ fitting simple linear regression model to the data set.
linear_regression_model <- lm(
formula = Salary ~ Level,
data = dataset
)
summary(linear_regression_model)
test_data <- as.data.frame(cbind(Level=dataset$Level))
predict(linear_regression_model, dataset)
predict(linear_regression_model, test_data)
# 4. Creating/ fitting polynomial linear regression model to the data set.
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
print(dataset)
polynomial_regression_model <- lm(
formula = Salary ~ .,
data = dataset
)
summary(polynomial_regression_model)
# 5. Visualizing the simple linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(linear_regression_model, dataset)), color="blue")+
ggtitle("Salary(level) - Simple linear regression regression") +
xlab("Level [-]") + ylab("Salary [$]") + ggsave("Salary(Level)-Simple-Linear-Regression.jpg")
# 6. Visualizing the polynomial linear regression model results.
ggplot()+geom_point(aes(x=dataset$Level, y=dataset$Salary), color="red")+
geom_line(aes(x=dataset$Level, y=predict(polynomial_regression_model, newdata=dataset)), color="purple")+
ggtitle("Salary(level) - Polynomial linear regression") +
xlab("Level [-]") + ylab("Salary [$]") + ggsave("Salary(Level)-Polynomial-Linear-Regression.jpg")
# 7. Predicting new result with Simple Linear Regression model.
y_predicted <- predict(linear_regression_model,
as.data.frame(cbind(Level=(6.5))))
print("Prediction of simple linear regression model for Level 6.5:")
print(y_predicted)
# OR
y_predicted <- predict(linear_regression_model, data.frame(Level = 6.5))
print(y_predicted)
# 8. Predicting new result by using Polynomial regression model.
res <- print(data.frame(Level=6.5, Level2=6.5^2, Level3 = 6.5^3, Level4 = 6.5^4))
print(dataset)
print(res)
y_predicted <- predict(polynomial_regression_model, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4
))
print(y_predicted)
# 8. Predicting new result by using Polynomial regression model.
tmp <- print(data.frame(Level=6.5, Level2=6.5^2, Level3 = 6.5^3, Level4 = 6.5^4))
y_predicted <- predict(polynomial_regression_model, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4
))
print(y_predicted)
# Importing the data set
dataset <- read.csv("Position_Salaries.csv")
dataset <- dataset[2:3]
print(dataset)
# Splitting the data set into training set and test set.
split_format = sample.split(dataset$Salary, SplitRatio=2/3)
test_set <- subset(dataset, split_format == FALSE)
test_set <- scale(test_test)
# Regression template
library(caTools)
# Importing the data set.
dataset <- read.csv("Position_Salaries.csv")
dataset <- dataset[2:3]
# Splitting the data set into training set and test set.
split_format <- sample.split(dataset$Salary, SplitRatio=2/3)
train_set <- subset(dataset, split_format == TRUE)
test_set <- subset(dataset, split_format == FALSE)
# Feature scaling
train_set <- scale(train_set)
test_set <- scale(test_test)
test_set <- scale(test_set)
library(ggplot2)
