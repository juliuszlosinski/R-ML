split = sample.split(data$Salary, SplitRatio = 2/3)
split = sample.split(data$Salary, SplitRatio = 2/3)
split = sample.split(data$Salary, SplitRatio = 2/3)
split = caTools::sample.split(data$Salary, SplitRatio = 2/3)
set.seed(123)
split = caTools::sample.split(data$Salary, SplitRatio = 2/3)
print(split)
training_set = subset(data, split=TRUE)
training_set = subset(data, split==TRUE)
print(training_set)
print(lenght(training_set))
print(size(training_set))
print(length(training_set))
print(length(training_set))
print(typeof(training_set))
print(training_set)
length(training_set$Salary)
training_set = subset(data, split)
training_set = subset(data, split)
print(training_set)
length(training_set$Salary)
test_set = subset(data, FALSE)
print(test_set$Salary)
print(test_set$Salary)
test_set = subset(data, split==FALSE)
print(test_set$Salary)
View(training_set)
print(split==FALSE)
print(split==FALSE)
training_set = subset(data, split==TRUE)
print(training_set)
length(training_set$Salary)
test_set = subset(data, split==FALSE)
print(split==FALSE)
print(test_set$Salary)
library(caTools)
split_format <- caTools::sample.split(data$Salary, SplitRatio = 2/3)
training_data <- subset(data, split_format == TRUE)
testing_data <- subset(data, split_format == FALSE)
print(length(testing_data$Salary))
print("Number of training data:")
print(length(training_data$Salary))
print("Number of testing data:")
plot(
training_data$YearsExperience,
training_data$Salary,
main="Salary(years)",
xlab="Years",
ylab="Salary",
col="red"
)
linear_regression_model <- lm(training_data$Salary ~ training_data$YearsExperience)
print(x)
x <- training_data$YearsExperience
print(x)
print(length(x)
print(length(x))
print(length(x))
as.data.frame(x)
print(lenght(as.data.frame(x))
print(lenght(as.data.frame(x))
print(length(as.data.frame(x))
print(length(as.data.frame(x))
print(length(as.data.frame(x))
print(length(as.data.frame(x))
print(length(as.data.frame(x)))
x <- as.data.frame(training_data$YearsExperience)
print(x)
predict(linear_regression_model, x)
plot(
x,y
)
plot(
x_testing,y_predicted
)
x_testing <- as.data.frame(training_data$YearsExperience)
y_predicted <- predict(linear_regression_model, x)
plot(
x_testing,y_predicted
)
plot(
x_testing$`training_data$YearsExperience`,y_predicted
)
?lm
regression_model <- lm(formula = training_data$Salary ~ training_data$YearsExperience)
print(predict(regression_model, as.data.frame(testing_data$YearsExperience)))
regression_model <- lm(formula = training_data$Salary ~ training_data$YearsExperience)
print(predict(regression_model, as.data.frame(testing_data$YearsExperience)))
regression_model <- lm(formula = training_data$Salary ~ training_data$YearsExperience)
print(predict(regression_model, as.data.frame(testing_data$YearsExperience)))
regression_model <- lm(formula = training_data$Salary ~ training_data$YearsExperience)
regression_linear_model <- lm(training_data$Salary ~ training_data$YearsExperience)
predicted <- predict(regression_linear_model, as.data.frame(training_data$YearsExperience))
print(predicted)
regression_linear_model <- lm(training_data$Salary ~ training_data$YearsExperience)
summary(regression_linear_model)
data <- read.csv("Salary_Data.csv")
library(caTools)
split_format <- caTools::sample.split(data$Salary, SplitRatio = 2/3)
training_data <- subset(data, split_format == TRUE)
testing_data <- subset(data, split_format == FALSE)
print("Number of training data:")
print(length(training_data$Salary))
print("Number of testing data:")
print(length(testing_data$Salary))
regression_linear_model <- lm(training_data$Salary ~ training_data$YearsExperience)
summary(regression_linear_model)
y_predicted <- predict(regression_linear_model, as.data.frame(testing_data$YearsExperience))
print(y_predicted)
print(testing_data$Salary)
print(testing_data$Salary)
print(y_predicted)
print(length(testing_data$Salary))
y_predicted <- predict(regression_linear_model, testing_data)
y_predicted <- predict(regression_linear_model, as.data.frame(testing_data$YearsExperience))
y_predicted <- predict(regression_linear_model, testing_data)
print(y_predicted)
print(y_predicted)
data_set <- read.csv("Salary_Data.csv")
data_set <- read.csv("Salary_Data.csv")
library(caTools)
split_format <- caTools::sample.split(data_set$Salary, SplitRatio = 2/3)
print(split_format)
print(split_format==TRUE)
print(split_format==FALSE)
data_set <- read.csv("Salary_Data.csv")
library(caTools)
split_format <- caTools::sample.split(data_set$Salary, SplitRatio = 2/3)
training_data <- subset(data_set, split_format == TRUE)
testing_data <- subset(data_set, split_format == FALSE)
print("Size of training data:")
print(length(training_data))
print("Size of training data:")
print(length(training_data$YearsExperience))
print("Size of testing data:")
print(length(testing_data$YearsExperience))
regression_linear_model <- lm(
training_data$Salary ~ training_data$YearsExperience
)
regression_linear_model <- lm(
training_data$Salary ~ training_data$YearsExperience
)
y_predicted <- predict(
regression_linear_model,
testing_data
)
print(y_predicted)
y_predicted <- predict(
regression_linear_model,
as.data.frame(testing_data$YearsExperience)
)
y_predicted <- predict(
regression_linear_model,
as.data.frame(testing_data$YearsExperience)
)
print("Size of training data:")
print(length(training_data$YearsExperience))
print("Size of testing data:")
print(length(testing_data$YearsExperience))
regression_linear_model <- lm(
training_data$Salary ~ training_data$YearsExperience
)
y_predicted <- predict(
regression_linear_model,
as.data.frame(testing_data$YearsExperience)
)
# Loading data
data_set <- read.csv("Salary_Data.csv")
library(caTools)
split_format <- caTools::sample.split(data_set$Salary, SplitRatio = 2/3)
training_data <- subset(data_set, split_format == TRUE)
testing_data <- subset(data_set, split_format == FALSE)
print("Size of training data:")
print(length(training_data$YearsExperience))
print("Size of testing data:")
print(length(testing_data$YearsExperience))
# Fitting Simple Linear Regression model.
regression_linear_model <- lm(
training_data$Salary ~ training_data$YearsExperience
)
# Predicting on the test results
y_predicted <- predict(
regression_linear_model,
as.data.frame(testing_data$YearsExperience)
)
# Printing results.
print(y_predicted)
install.packages(ggplot2)
install.packages('ggplot2')
?ggplot2
?ggplot2
??ggplot2
?ggplot2
ggplot2::qplot(training_data$YearsExperience, training_data$Salary)
ggplot2::qplot(
training_data$YearsExperience,
training_data$Salary,
xlab = "Years of experience",
ylab = "Salary"
)
ggplot2::qplot(
training_data$YearsExperience,
training_data$Salary,
xlab = "Years of experience",
ylab = "Salary",
xlim = 5
)
ggplot2::qplot(
training_data$YearsExperience,
training_data$Salary,
xlab = "Years of experience",
ylab = "Salary",
xlim = 1000
)
ggplot2::qplot(
training_data$YearsExperience,
training_data$Salary,
xlab = "Years of experience",
ylab = "Salary"
)
ggplot2::qplot(
training_data$YearsExperience,
training_data$Salary,
xlab = "Years of experience",
ylab = "Salary",
title="Salary(years of experience)"
)
ggplot2::qplot(
training_data$YearsExperience,
training_data$Salary,
xlab = "Years of experience",
ylab = "Salary",
main="Salary(years of experience)"
)
ggplot::ggplot()
ggplot2::ggplot()
ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x = training_set$YearsExperience, y=training_set$Salary))
ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x = training_set$YearsExperience, y=training_set$Salary), color="red")
+ ggplot2::geom_point(ggplot2::aes(x = training_set$YearsExperience, y=training_set$Salary), color="red")
+ ggplot2::geom_point(ggplot2::aes(x = testing_set$YearsExperience, y=testing_set$Salary), color="red")
+ ggplot2::geom_point(ggplot2::aes(x = testing_set$YearsExperience, y=testing_set$Salary), color="blue")
ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x = training_set$YearsExperience, y=training_set$Salary), color="red")
+ ggplot2::geom_point(ggplot2::aes(x = testing_set$YearsExperience, y=testing_set$Salary), color="blue")
ggplot2::ggplot()
ggplot2::ggplot() + ggplot2::geom_point(
ggplot2::aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")
ggplot2::ggplot() + ggplot2::geom_point(
ggplot2::aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
ggplot2::geom_point(
ggplot2::aes(x=testing_data$YearsExperience, y=y_predicted), color="blue")
ggplot2::ggplot() + ggplot2::geom_point(
ggplot2::aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
ggplot2::geom_point(
ggplot2::aes(x=testing_data$YearsExperience, y=y_predicted), color="blue")
ggplot2::ggplot() + ggplot2::geom_point(
ggplot2::aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
ggplot2::geom_point(
ggplot2::aes(x=training_data$YearsExperience, y=y_predicted), color="blue")
library(ggplot2)
ggplot()+geom_area(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))))
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))))
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=training_data$Salary), color="green")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=training_data$Salary), color="green")+
main = "G"
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=training_data$Salary), color="green")+
main("g")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=training_data$Salary), color="green")+
ggtitle("Salary(years of experience")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=training_data$Salary), color="green")+
ggtitle("Salary(years of experience)")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=training_data$Salary), color="green")+
ggtitle("Salary(years of experience)") + xlab("Years of experience [y]") + ylab("Salary [$]")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="green")+
ggtitle("Salary(years of experience)") + xlab("Years of experience [y]") + ylab("Salary [$]")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="green")+
ggtitle("Salary(years of experience)") + xlab("Years of experience [y]") + ylab("Salary [$]") + ggsave("Test")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="green")+
ggtitle("Salary(years of experience)") + xlab("Years of experience [y]") + ylab("Salary [$]") + ggsave("Test.jpg")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="green")+
ggtitle("Salary(years of experience)") + xlab("Years of experience [y]") + ylab("Salary [$]") + ggsave("Salary(years).jpg")
ggplot()+geom_point(aes(x=training_data$YearsExperience, y=training_data$Salary), color="red")+
geom_point(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="blue")+
geom_line(aes(x=training_data$YearsExperience, y=predict(regression_linear_model, as.data.frame(training_data$YearsExperience))), color="green")+
ggtitle("Salary(years of experience)") + xlab("Years of experience [y]") + ylab("Salary [$]") + ggsave("Salary(years) - Linear Regression.jpg")
library(ggplot2)
library(ggplot2)
training_data
data_set <- read.csv("50_startups.csv")
data_set <- read.csv("50_startups.csv")
data_set <- read.csv("50_Startups.csv")
setwd("~/SocialNets/R-ML/Regression/Multi Linear Regreesion")
data_set <- read.csv("50_Startups.csv")
summary(data_set)
print(data_set)
print(summary(data_set$Profit))
plot(data_set)
print(summary(data_set$Profit))
dataset <- read.csv("50_Startups.csv")
library(caTools)
# 1. Preprocessing
# 1.1 Encoding categorical data.
dataset$State <- factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# 1.2 Splitting data set into training and testing.
split_format <- caTools::sample.split(dataset$State, SplitRatio = 0.8)
training_data <- subset(dataset, split_format == TRUE)
testing_data <- subset(dataset, split_format == FALSE)
print("Size of training data:")
print(length(training_data$Profit))
print("Size of testing data:")
print(length(testing_data$Profit))
# 2. Training linear regression model.
# Fitting multi linear regression model.
linear_regression_model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_data
)
summary(linear_regression_model)
y_predicted = lm(linear_regression_model, newdata = testing_data)
y_predicted = predict(linear_regression_model, newdata = testing_data)
y_predicted = predict(linear_regression_model, newdata = testing_data)
X_testing = as.data.frame(cbind(
testing_data$R.D.Spend, testing_data$Administration,
testing_data$Administration, testing_data$Marketing.Spend,
testing_data$State
))
X_testing = as.data.frame(cbind(
testing_data$R.D.Spend, testing_data$Administration,
testing_data$Administration, testing_data$Marketing.Spend,
testing_data$State
))
y_predicted = predict(linear_regression_model, X_testing)
X_testing = as.data.frame(cbind(
testing_data$R.D.Spend, testing_data$Administration,
testing_data$Administration, testing_data$Marketing.Spend,
testing_data$State
))
print(X_testing)
X_testing = as.data.frame(cbind(
a<-testing_data$R.D.Spend, testing_data$Administration,
testing_data$Administration, testing_data$Marketing.Spend,
testing_data$State
))
X_testing = as.data.frame(cbind(
a<-testing_data$R.D.Spend, testing_data$Administration,
testing_data$Administration, testing_data$Marketing.Spend,
testing_data$State
))
print(X_testing)
print(testing_data)
X_testing = as.data.frame(cbind(
a<-testing_data$R.D.Spend, b<-testing_data$Administration,
c<-testing_data$Administration, d<-testing_data$Marketing.Spend,
e<-testing_data$State
))
print(X_testing)
X_testing = as.data.frame(cbind(
a=testing_data$R.D.Spend, b<-testing_data$Administration,
c<-testing_data$Administration, d<-testing_data$Marketing.Spend,
e<-testing_data$State
))
print(X_testing)
X_testing = as.data.frame(cbind(
R.D.Spend=testing_data$R.D.Spend, b<-testing_data$Administration,
Administration=testing_data$Administration, d<-testing_data$Marketing.Spend,
e<-testing_data$State
))
print(X_testing)
y_predicted = predict(linear_regression_model, X_testing)
# 2. Training linear regression model.
# Fitting multi linear regression model.
linear_regression_model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_data
)
summary(linear_regression_model)
print(X_testing)
y_predicted = predict(linear_regression_model, X_testing)
y_predicted = predict(linear_regression_model, testing_data)
print(y_predicted)
summary(linear_regression_model)
y_predicted = predict(linear_regression_model, testing_data)
print(y_predicted)
print(testing_data$Profit)
print("Y predicted:")
print(y_predicted)
library(caTools)
library(ggplot2)
# 0. Loading data into data frame.
dataset <- read.csv("50_Startups.csv")
# 1. Preprocessing
# 1.1 Encoding categorical data.
dataset$State <- factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# 1.2 Splitting data set into training and testing.
split_format <- caTools::sample.split(dataset$State, SplitRatio = 0.8)
training_data <- subset(dataset, split_format == TRUE)
testing_data <- subset(dataset, split_format == FALSE)
print("Size of training data:")
print(length(training_data$Profit))
print("Size of testing data:")
print(length(testing_data$Profit))
# 2. Training linear regression model.
# 2.1 Fitting multi linear regression model.
linear_regression_model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_data
)
summary(linear_regression_model)
# 3. Testing multi linear regression model.
y_predicted = predict(linear_regression_model, testing_data)
print("Y expected:")
print(testing_data$Profit)
print("Y predicted:")
print(y_predicted)
ggplot()
ggplot() + geom_area(aes(x=testing_data$R.D.Spend, y=testing_data$Profit))
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit))
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit))
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit))+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted))
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit))+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit), color="red")+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit), color="red")+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")+ggtitle("Salary(R.D.Spend)")+
xlab("R.D.Spend [$]")+ylab("Profit [$]")
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit), color="red")+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")+ggtitle("Salary(R.D.Spend)")+
xlab("R.D.Spend [$]")+ylab("Profit [$]") + geom_line(aes(x=testing_data$R.D.Spend, y=y_predicted))
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit), color="red")+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")+ggtitle("Salary(R.D.Spend)")+
xlab("R.D.Spend [$]")+ylab("Profit [$]") + ggsave("Salary(R.D.Spend).jpg")
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit), color="red")+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")+ggtitle("Salary(R.D.Spend)")+
xlab("R.D.Spend [$]")+ylab("Profit [$]") + ggsave("Salary(R.D.Spend).jpg")
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit), color="red")+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")+ggtitle("Salary(R.D.Spend)")+
xlab("R.D.Spend [$]")+ylab("Profit [$]") + ggsave("Salary(R.D.Spend).jpg")
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit), color="red")+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")+ggtitle("Salary(R.D.Spend)")+
xlab("R.D.Spend [$]")+ylab("Profit [$]") + ggsave("Salary(R.D.Spend).jpg")+ggplot()
ggplot() + geom_point(aes(x=testing_data$R.D.Spend, y=testing_data$Profit), color="red")+
geom_point(aes(x=testing_data$R.D.Spend, y=y_predicted), color="blue")+ggtitle("Salary(R.D.Spend)")+
xlab("R.D.Spend [$]")+ylab("Profit [$]") + ggsave("Salary(R.D.Spend).jpg")
model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_data
)
summary(model)
model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_data
)
summary(model)
model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend
data = trainig_data
model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_data
)
summary(model)
model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend
data = training_data
summary(model)
model <- lm(
formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = training_data
)
summary(model)
model <- lm(
formula = Profit ~ R.D.Spend + Marketing.Spend,
data = training_data
)
summary(model)
model <- lm(
formula = Profit ~ R.D.Spend,
data = training_data
)
summary(model)
setwd("~/SocialNets/R-ML/Regression/Multi Linear Regreesion")
